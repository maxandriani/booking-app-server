// <auto-generated />
using System;
using Booking.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Booking.Core.Postgres.Migrations.BookingDb
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20220924013153_Setup")]
    partial class Setup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Booking.Core.Bookings.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex(new[] { "CheckIn" }, "idx_booking_checkin_search");

                    b.HasIndex(new[] { "CheckOut" }, "idx_booking_checkout_search");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Booking.Core.Bookings.Models.BookingGuest", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("boolean");

                    b.HasKey("BookingId", "GuestId");

                    b.ToTable("BookingGuests");
                });

            modelBuilder.Entity("Booking.Core.GuestContacts.Models.GuestContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex(new[] { "Type" }, "idx_guestcontact_type_search");

                    b.ToTable("GuestContacts");
                });

            modelBuilder.Entity("Booking.Core.Guests.Models.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Booking.Core.Places.Models.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Booking.Core.Bookings.Models.Booking", b =>
                {
                    b.HasOne("Booking.Core.Places.Models.Place", "Place")
                        .WithMany("Bookings")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Booking.Core.Bookings.Models.BookingGuest", b =>
                {
                    b.HasOne("Booking.Core.Bookings.Models.Booking", "Booking")
                        .WithMany("Guests")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Core.Guests.Models.Guest", "Guest")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("Booking.Core.GuestContacts.Models.GuestContact", b =>
                {
                    b.HasOne("Booking.Core.Guests.Models.Guest", "Guest")
                        .WithMany("Contacts")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("Booking.Core.Bookings.Models.Booking", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("Booking.Core.Guests.Models.Guest", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Booking.Core.Places.Models.Place", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
